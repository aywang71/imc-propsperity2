import pandas as pd

class Trader:
  def __init__(self, short_window=10, long_window=50):
    self.short_window = short_window
    self.long_window = long_window
    self.holdings = {}  # Dictionary to store current holdings (symbol: quantity)

  def run(self, state):
    orders = {}
    prices = state.market_data["price"]  # Get current prices for all products
    
    for symbol, price in prices.items():
      # Calculate moving averages (assuming data is available in state.market_data)
      short_ma = pd.Series(state.market_data["price"][symbol]).rolling(self.short_window).mean().iloc[-1]
      long_ma = pd.Series(state.market_data["price"][symbol]).rolling(self.long_window).mean().iloc[-1]
      
      # Check for buy/sell signals and holding position
      if short_ma > long_ma and symbol not in self.holdings:
        # Buy signal: Create a limit order with a buffer below current price
        order_price = max(0.95 * price, 1)  # Adjust buffer percentage as needed
        orders[symbol] = Order(symbol, order_price, 1)
      elif short_ma < long_ma and symbol in self.holdings:
        # Sell signal: Create a limit order with a buffer above current price
        order_price = min(1.05 * price, 1e10)  # Adjust buffer percentage and max price
        orders[symbol] = Order(symbol, order_price, -self.holdings[symbol])
    
    return orders

class Order:
  def __init__(self, symbol, price, quantity):
    self.symbol = symbol
    self.price = price
    self.quantity = quantity
